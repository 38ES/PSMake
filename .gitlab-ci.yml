include:
  - project: 688cw/38ceig/automation/ci-cd-templates
    ref: main
    file: PowerShell/PowerShell.gitlab-ci.yml

variables:
  PESTER_MAJOR_VERSION: 5

default:
  image:
    name: registry.90cos.cdl.af.mil/688cw/38ceig/automation/docker-ceig-development-image:v2.6
    entrypoint: ["/bin/bash", "-c"]

stages:
  - .pre
  - build
  - test
  - deploy
  - deploy-docker
  - trigger

PowerShell Build:
  script:
    - pwsh -Command "{Import-Module ./PSMake.psd1 -ErrorAction Stop; PSMake clean -ErrorAction Stop; PSMake build -ErrorAction Stop -Verbose}.Invoke()"

PowerShell Test:
  stage: test
  needs: ["PowerShell Setup"]
  coverage: /Covered (\d+\.\d+%)/
  script:
    - pwsh -Command "{Import-Module Pester -MinimumVersion $PESTER_MAJOR_VERSION.0 -MaximumVersion $PESTER_MAJOR_VERSION.99 -ErrorAction Stop; Invoke-Pester -Configuration (Import-PowerShellDataFile .\Pester5Configuration-cicd.psd1)}.Invoke()"
  after_script: []
  artifacts:
    when: always
    untracked: false
    expire_in: 30 days
    paths:
      - PesterTestsReport.xml
      - CodeCoverageReport.xml
    reports:
      junit: PesterTestsReport.xml

.register-repository: &register-repository
  - echo "Repository registered in v2.6 of base image"

PowerShell Test Coverage:
  stage: test
  needs: ["PowerShell Test"]
  image: haynes/jacoco2cobertura:1.0.7
  script:
    - python3 /opt/cover2cover.py $CI_PROJECT_DIR/CodeCoverageReport.xml $CI_PROJECT_DIR/functions/ > $CI_PROJECT_DIR/cobertura-coverage.xml
  artifacts:
    untracked: false
    when: on_success
    expire_in: "30 days"
    reports:
      coverage_report:
        coverage_format: cobertura
        path: $CI_PROJECT_DIR/cobertura-coverage.xml

.set-export-prerelease: &set-export-prerelease |
  pwsh << EOF
    Import-Module Configuration

    \$date = (Get-Date).ToString("yyyyMMddHHmm")
    \$prerelease = "rc\$date"
    \$version = Import-PowerShellDataFile ./dist/Release/$MODULE_NAME/$MODULE_NAME.psd1 | Select-Object -ExpandProperty ModuleVersion
    
    Update-Metadata -Path ./dist/Release/$MODULE_NAME/$MODULE_NAME.psd1 -PropertyName 'PrivateData.PSData.Prerelease' -Value \$prerelease
    "TAG=\$version-\$prerelease" | Out-File ./tag.env -Encoding ASCII
    "RELEASETYPE=Prerelease" | Out-File ./tag.env -Encoding ASCII -Append
  EOF


.publish-module: &publish-module
  - pwsh -Command "Install-Module powershell-yaml -Force -AllowClobber"
  - pwsh -Command "Publish-Module -Path ./dist/Release/$MODULE_NAME/ -Repository \$env:POWERSHELL_REPO_NAME -NuGetApiKey \$env:POWERSHELL_REPO_APIKEY -Credential \$([pscredential]::new(\$env:POWERSHELL_REPO_USR, (ConvertTo-SecureString -String \$env:POWERSHELL_REPO_PW -AsPlainText -Force)))"
  - pwsh -Command "if (-not (Test-Path ./tag.env)) { Import-PowerShellDataFile ./dist/Release/$MODULE_NAME/$MODULE_NAME.psd1 | Select-Object -ExpandProperty ModuleVersion | % { \"TAG=\$_\" | Out-File tag.env -Encoding ASCII; \"RELEASETYPE=Release\" | Out-File .\tag.env -Encoding ASCII -Append } }"

Powershell Publish Prerelease:
  stage: deploy
  needs: ["PowerShell Setup", "PowerShell Build", "PowerShell Test"]
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
  script:
    - *set-export-prerelease
    - *register-repository
    - *publish-module
    - cat tag.env
  artifacts:
    untracked: false
    when: on_success
    expire_in: "30 days"
    reports:
      dotenv: tag.env
    

PowerShell Publish Release:
  stage: deploy
  needs: ["PowerShell Setup", "PowerShell Build", "PowerShell Test"]
  rules:
   - if: '$CI_COMMIT_TAG'
  script:
    - *register-repository
    - *publish-module
    - cat tag.env
  artifacts:
    untracked: false
    when: on_success
    expire_in: "30 days"
    reports:
      dotenv: tag.env

.trigger_docker: &trigger_docker
  stage: trigger
  variables:
    TAG: ${TAG}
    RELEASETYPE: ${RELEASETYPE}
  trigger:
    project: 688cw/38ceig/automation/containers/psmake

Trigger Docker Release:
  <<: *trigger_docker
  rules:
    - if: "$CI_COMMIT_TAG"
  needs:
    - job: "PowerShell Publish Release"
      artifacts: true

Trigger Docker Prerelease:
  <<: *trigger_docker
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
  needs: ["Powershell Publish Prerelease"]