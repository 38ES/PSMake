include:
  - project: 688cw/38ceig/automation/ci-cd-templates
    ref: main
    file: PowerShell/PowerShell.gitlab-ci.yml

variables:
  PESTER_MAJOR_VERSION: 5

default:
  image:
    name: registry.90cos.cdl.af.mil/688cw/38ceig/automation/docker-ceig-development-image:v2.6
    entrypoint: ["/bin/bash", "-c"]

stages:
  - .pre
  - build
  - test
  - deploy
  - deploy-docker
  - trigger

PowerShell Build:
  script:
    - pwsh -Command "{Import-Module ./make.psd1 -ErrorAction Stop; make clean -ErrorAction Stop; make build -ErrorAction Stop -Verbose}.Invoke()"

PowerShell Test:
  stage: test
  needs: ["PowerShell Setup"]
  coverage: /Covered (\d+\.\d+%)/
  script:
    - pwsh -Command "{Import-Module Pester -MinimumVersion $PESTER_MAJOR_VERSION.0 -MaximumVersion $PESTER_MAJOR_VERSION.99 -ErrorAction Stop; Invoke-Pester -Configuration (Import-PowerShellDataFile .\Pester5Configuration-cicd.psd1)}.Invoke()"
  after_script: []
  artifacts:
    when: always
    untracked: false
    expire_in: 30 days
    paths:
      - PesterTestsReport.xml
      - CodeCoverageReport.xml
    reports:
      junit: PesterTestsReport.xml

.register-repository: &register-repository
  - echo "Repository registered in v2.6 of base image"

PowerShell Test Coverage:
  stage: test
  needs: ["PowerShell Test"]
  image: haynes/jacoco2cobertura:1.0.7
  script:
    - python3 /opt/cover2cover.py $CI_PROJECT_DIR/CodeCoverageReport.xml $CI_PROJECT_DIR/functions/ > $CI_PROJECT_DIR/cobertura-coverage.xml
  artifacts:
    untracked: false
    when: on_success
    expire_in: "30 days"
    reports:
      coverage_report:
        coverage_format: cobertura
        path: $CI_PROJECT_DIR/cobertura-coverage.xml

.set-export-prerelease: &set-export-prerelease |
  pwsh << EOF
    Import-Module Configuration

    \$date = (Get-Date).ToString("yyyyMMddHHmm")
    \$prerelease = "rc\$date"
    \$version = Import-PowerShellDataFile ./dist/Release/$MODULE_NAME/$MODULE_NAME.psd1 | Select-Object -ExpandProperty ModuleVersion
    
    Update-Metadata -Path ./dist/Release/$MODULE_NAME/$MODULE_NAME.psd1 -PropertyName 'PrivateData.PSData.Prerelease' -Value \$prerelease
  EOF


.register-localrepo: &register-localrepo
  - mkdir local-repo
  - |
    pwsh << EOF
      Register-PSRepository \`
        -Name \$env:LOCAL_REPO_NAME \`
        -SourceLocation "\$(\$env:PWD)/local-repo" \`
        -PublishLocation "\$(\$env:PWD)/local-repo" \`
        -InstallationPolicy Trusted \`
        -ErrorAction Stop

    EOF

.publish-module: &publish-module
  - pwsh -Command "Install-Module powershell-yaml -Force -AllowClobber"
  - pwsh -Command "Publish-Module -Path ./dist/Release/$MODULE_NAME/ -Repository \$env:POWERSHELL_REPO_NAME -NuGetApiKey \$env:POWERSHELL_REPO_APIKEY -Credential \$([pscredential]::new(\$env:POWERSHELL_REPO_USR, (ConvertTo-SecureString -String \$env:POWERSHELL_REPO_PW -AsPlainText -Force)))"
  - pwsh -Command "Publish-Module -Path ./dist/Release/$MODULE_NAME/ -Repository \$env:LOCAL_REPO_NAME -ErrorAction Stop"

.publish-job-artifacts: &publish-job-artifacts
  artifacts:
    paths:
      - ./local-repo/*.nupkg

Powershell Publish Prerelease:
  stage: deploy
  needs: ["PowerShell Setup", "PowerShell Build", "PowerShell Test"]
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
  script:
    - *set-export-prerelease
    - *register-repository
    - *register-localrepo
    - *publish-module
  <<: *publish-job-artifacts

PowerShell Publish Release:
  stage: deploy
  needs: ["PowerShell Setup", "PowerShell Build", "PowerShell Test"]
  rules:
   - if: '$CI_COMMIT_TAG'
  script:
    - *register-repository
    - *register-localrepo
    - *publish-module
  <<: *publish-job-artifacts

# Docker build job template used for making seperate jobs for Release and PreRelease
.build-docker: &build-docker
  image:
    name: quay.io/buildah/stable
  variables:
    STORAGE_DRIVER: vfs
  before_script:
    - cp /etc/gitlab-runner/certs/ca.crt /etc/pki/ca-trust/source/anchors/
    - update-ca-trust enable
    - update-ca-trust extract
    - buildah login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - buildah bud -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG" --format docker .
    - buildah push "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"

Build And Publish Docker Image:
  stage: deploy-docker
  rules:
    - if: '$CI_COMMIT_TAG'
  needs: ['PowerShell Publish Release']
  <<: *build-docker
